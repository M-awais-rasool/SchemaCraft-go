name: Deploy to EC2

on:
  push:
    branches: [ main ]
    paths: [ 'BackEnd/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'BackEnd/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./BackEnd
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build application
      run: go build -v ./...

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
    
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo 'Docker not found. Please run the setup script first.'
            exit 1
          fi
          
          # Check if deploy directory exists
          if [ ! -d '${{ secrets.DEPLOY_PATH }}' ]; then
            echo 'Deploy directory not found. Please run the setup script first.'
            exit 1
          fi
          
          # Navigate to deploy directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Check if git repository exists
          if [ ! -d '.git' ]; then
            echo 'Git repository not found. Please clone the repository first.'
            exit 1
          fi
          
          # Pull latest changes
          git pull origin main
          
          # Navigate to backend directory
          cd BackEnd
          
          # Check if .env file exists
          if [ ! -f '.env' ]; then
            echo 'Environment file not found. Please create .env file first.'
            cp .env.example .env
            echo 'Please configure the .env file with your settings.'
            exit 1
          fi
          
          # Build and deploy
          docker build -t schemacraft-backend .
          docker stop schemacraft-backend || true
          docker rm schemacraft-backend || true
          docker run -d \
            --name schemacraft-backend \
            -p 8080:8080 \
            --env-file .env \
            --restart unless-stopped \
            schemacraft-backend
          docker system prune -f
        "
    
    - name: Verify deployment
      run: |
        sleep 30
        if curl -f http://${{ secrets.EC2_HOST }}:8080/health; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment verification failed!"
          echo "Please check the application logs on EC2:"
          echo "ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'docker logs schemacraft-backend'"
          exit 1
        fi
